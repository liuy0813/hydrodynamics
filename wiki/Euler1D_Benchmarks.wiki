#summary Benchmarks for the Euler1D code in Fortran90, Python and Java

== Euler1D Language Benchmarks ==

The Euler1D code was a good opportunity to test the performance of different programming languages for scientific computing. A small portion of the original Euler1D code was ported first to Python and later to Java. The same problem was solved on all three versions of the code, and the results are presented in this page.

=== Python and Java ports ===

Specifically, the ports are a trimmed-down version of the Euler1D code featuring only one solution algorithm: the Lax-Friedrichs method. Since this method is simple, porting the code to Python and Java was relatively quick (more so for Python than for Java).

You can download the Python port [http://code.google.com/p/hydrodynamics/source/browse/trunk/Euler1D/python/Euler1D.py here].

The Java port is composed of the Euler1D.java class; it must be launched as main.Euler1D since it's part of the main package.

=== Benchmark ===

I ran the standard [http://en.wikipedia.org/wiki/Sod_Shock_Tube Sod Shock Tube] test with all three codes, using the Lax-Friedrichs algorithm and the following simulation parameters:

  * Number of grid points: 5000
  * Final integration time: 0.5
  * Courant parameter: 0.5

=== Results ===

|| *Language*  || *Compiler/Interpreter* || *Options* || *Execution Time* || *Ratio to fastest* ||
|| Fortran90 || GCC Fortran compiler 4.3.3 || -O3 -Wall || 6.634s || 1.0 ||
|| Java      || Sun JRE 1.6.0_14 || -O || 7.280s || 1.097 ||
|| Java - no JIT || Sun JRE 1.6.0_14 || -Djava.compiler=NONE || 569.43s || 87.2 ||
|| Python    || Python 2.6.2 || -O || 751.9s || 113.3 ||

Note: for Fortran90 and Java, the benchmark was run 5 times - shown is the average execution time (for Java without JIT and Python there was no point).